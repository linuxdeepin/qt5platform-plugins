/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./qt5platform-plugins/misc/com.deepin.im.xml -a ./qt5platform-plugins/toolGenerate/qdbusxml2cpp/com.deepin.imAdaptor -i ./qt5platform-plugins/toolGenerate/qdbusxml2cpp/com.deepin.im.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_IMADAPTOR_H
#define COM_DEEPIN_IMADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./qt5platform-plugins/toolGenerate/qdbusxml2cpp/com.deepin.im.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.im
 */
class ImAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.im")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.im\">\n"
"    <property access=\"read\" type=\"(iiii)\" name=\"geometry\">\n"
"      <annotation value=\"QRect\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"imActive\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"imSignalLock\"/>\n"
"    <signal name=\"geometryChanged\">\n"
"      <arg direction=\"out\" type=\"(iiii)\" name=\"rect\"/>\n"
"      <annotation value=\"QRect\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </signal>\n"
"    <signal name=\"imActiveChanged\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"is\"/>\n"
"    </signal>\n"
"    <signal name=\"imSignalLockChanged\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"is\"/>\n"
"    </signal>\n"
"    <method name=\"setKeyboardHeight\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"h\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    ImAdaptor(QObject *parent);
    virtual ~ImAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QRect geometry READ geometry)
    QRect geometry() const;

    Q_PROPERTY(bool imActive READ imActive WRITE setImActive)
    bool imActive() const;
    void setImActive(bool value);

    Q_PROPERTY(bool imSignalLock READ imSignalLock WRITE setImSignalLock)
    bool imSignalLock() const;
    void setImSignalLock(bool value);

public Q_SLOTS: // METHODS
    void setKeyboardHeight(int h);
Q_SIGNALS: // SIGNALS
    void geometryChanged(const QRect &rect);
    void imActiveChanged(bool is);
    void imSignalLockChanged(bool is);
};

#endif
