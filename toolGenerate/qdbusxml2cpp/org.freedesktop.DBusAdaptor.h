/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./qt5platform-plugins/misc/org.freedesktop.DBus.xml -a ./qt5platform-plugins/toolGenerate/qdbusxml2cpp/org.freedesktop.DBusAdaptor -i ./qt5platform-plugins/toolGenerate/qdbusxml2cpp/org.freedesktop.DBus.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef ORG_FREEDESKTOP_DBUSADAPTOR_H
#define ORG_FREEDESKTOP_DBUSADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./qt5platform-plugins/toolGenerate/qdbusxml2cpp/org.freedesktop.DBus.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.freedesktop.DBus
 */
class DBusAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.DBus")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.DBus\">\n"
"    <method name=\"Hello\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"RequestName\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"out\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"ReleaseName\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"StartServiceByName\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"out\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"NameHasOwner\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"ListNames\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"ListActivatableNames\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"AddMatch\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"RemoveMatch\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"GetNameOwner\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"ListQueuedOwners\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"GetConnectionUnixUser\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"GetConnectionUnixProcessID\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"GetAdtAuditSessionData\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"ay\"/>\n"
"    </method>\n"
"    <method name=\"GetConnectionSELinuxSecurityContext\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"ay\"/>\n"
"    </method>\n"
"    <method name=\"ReloadConfig\"/>\n"
"    <method name=\"GetId\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <signal name=\"NameOwnerChanged\">\n"
"      <arg type=\"s\"/>\n"
"      <arg type=\"s\"/>\n"
"      <arg type=\"s\"/>\n"
"    </signal>\n"
"    <signal name=\"NameLost\">\n"
"      <arg type=\"s\"/>\n"
"    </signal>\n"
"    <signal name=\"NameAcquired\">\n"
"      <arg type=\"s\"/>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    DBusAdaptor(QObject *parent);
    virtual ~DBusAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void AddMatch(const QString &in0);
    QByteArray GetAdtAuditSessionData(const QString &in0);
    QByteArray GetConnectionSELinuxSecurityContext(const QString &in0);
    uint GetConnectionUnixProcessID(const QString &in0);
    uint GetConnectionUnixUser(const QString &in0);
    QString GetId();
    QString GetNameOwner(const QString &in0);
    QString Hello();
    QStringList ListActivatableNames();
    QStringList ListNames();
    QStringList ListQueuedOwners(const QString &in0);
    bool NameHasOwner(const QString &in0);
    uint ReleaseName(const QString &in0);
    void ReloadConfig();
    void RemoveMatch(const QString &in0);
    uint RequestName(const QString &in0, uint in1);
    uint StartServiceByName(const QString &in0, uint in1);
Q_SIGNALS: // SIGNALS
    void NameAcquired(const QString &in0);
    void NameLost(const QString &in0);
    void NameOwnerChanged(const QString &in0, const QString &in1, const QString &in2);
};

#endif
