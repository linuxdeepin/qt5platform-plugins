// This file was generated by qtwaylandscanner
// source file is /home/fei/repo/qtwayland/src/client/../3rdparty/protocol/pointer-gestures-unstable-v1.xml

#ifndef QT_WAYLAND_POINTER_GESTURES_UNSTABLE_V1
#define QT_WAYLAND_POINTER_GESTURES_UNSTABLE_V1

#include <QtWaylandClient/private/wayland-pointer-gestures-unstable-v1-client-protocol.h>
#include <QByteArray>
#include <QString>

struct wl_registry;

QT_BEGIN_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_GCC("-Wmissing-field-initializers")

#if !defined(Q_WAYLAND_CLIENT_POINTER_GESTURES_UNSTABLE_V1_EXPORT)
#  if defined(QT_SHARED)
#    define Q_WAYLAND_CLIENT_POINTER_GESTURES_UNSTABLE_V1_EXPORT Q_DECL_EXPORT
#  else
#    define Q_WAYLAND_CLIENT_POINTER_GESTURES_UNSTABLE_V1_EXPORT
#  endif
#endif

namespace QtWayland {
    class Q_WAYLAND_CLIENT_POINTER_GESTURES_UNSTABLE_V1_EXPORT zwp_pointer_gestures_v1
    {
    public:
        zwp_pointer_gestures_v1(struct ::wl_registry *registry, uint32_t id, int version);
        zwp_pointer_gestures_v1(struct ::zwp_pointer_gestures_v1 *object);
        zwp_pointer_gestures_v1();

        virtual ~zwp_pointer_gestures_v1();

        void init(struct ::wl_registry *registry, uint32_t id, int version);
        void init(struct ::zwp_pointer_gestures_v1 *object);

        struct ::zwp_pointer_gestures_v1 *object() { return m_zwp_pointer_gestures_v1; }
        const struct ::zwp_pointer_gestures_v1 *object() const { return m_zwp_pointer_gestures_v1; }
        static zwp_pointer_gestures_v1 *fromObject(struct ::zwp_pointer_gestures_v1 *object);

        bool isInitialized() const;

        uint32_t version() const;
        static const struct ::wl_interface *interface();

        struct ::zwp_pointer_gesture_swipe_v1 *get_swipe_gesture(struct ::wl_pointer *pointer);
        struct ::zwp_pointer_gesture_pinch_v1 *get_pinch_gesture(struct ::wl_pointer *pointer);
        void release();

    private:
        struct ::zwp_pointer_gestures_v1 *m_zwp_pointer_gestures_v1;
    };

    class Q_WAYLAND_CLIENT_POINTER_GESTURES_UNSTABLE_V1_EXPORT zwp_pointer_gesture_swipe_v1
    {
    public:
        zwp_pointer_gesture_swipe_v1(struct ::wl_registry *registry, uint32_t id, int version);
        zwp_pointer_gesture_swipe_v1(struct ::zwp_pointer_gesture_swipe_v1 *object);
        zwp_pointer_gesture_swipe_v1();

        virtual ~zwp_pointer_gesture_swipe_v1();

        void init(struct ::wl_registry *registry, uint32_t id, int version);
        void init(struct ::zwp_pointer_gesture_swipe_v1 *object);

        struct ::zwp_pointer_gesture_swipe_v1 *object() { return m_zwp_pointer_gesture_swipe_v1; }
        const struct ::zwp_pointer_gesture_swipe_v1 *object() const { return m_zwp_pointer_gesture_swipe_v1; }
        static zwp_pointer_gesture_swipe_v1 *fromObject(struct ::zwp_pointer_gesture_swipe_v1 *object);

        bool isInitialized() const;

        uint32_t version() const;
        static const struct ::wl_interface *interface();

        void destroy();

    protected:
        virtual void zwp_pointer_gesture_swipe_v1_begin(uint32_t serial, uint32_t time, struct ::wl_surface *surface, uint32_t fingers);
        virtual void zwp_pointer_gesture_swipe_v1_update(uint32_t time, wl_fixed_t dx, wl_fixed_t dy);
        virtual void zwp_pointer_gesture_swipe_v1_end(uint32_t serial, uint32_t time, int32_t cancelled);

    private:
        void init_listener();
        static const struct zwp_pointer_gesture_swipe_v1_listener m_zwp_pointer_gesture_swipe_v1_listener;
        static void handle_begin(
            void *data,
            struct ::zwp_pointer_gesture_swipe_v1 *object,
            uint32_t serial,
            uint32_t time,
            struct ::wl_surface *surface,
            uint32_t fingers);
        static void handle_update(
            void *data,
            struct ::zwp_pointer_gesture_swipe_v1 *object,
            uint32_t time,
            wl_fixed_t dx,
            wl_fixed_t dy);
        static void handle_end(
            void *data,
            struct ::zwp_pointer_gesture_swipe_v1 *object,
            uint32_t serial,
            uint32_t time,
            int32_t cancelled);
        struct ::zwp_pointer_gesture_swipe_v1 *m_zwp_pointer_gesture_swipe_v1;
    };

    class Q_WAYLAND_CLIENT_POINTER_GESTURES_UNSTABLE_V1_EXPORT zwp_pointer_gesture_pinch_v1
    {
    public:
        zwp_pointer_gesture_pinch_v1(struct ::wl_registry *registry, uint32_t id, int version);
        zwp_pointer_gesture_pinch_v1(struct ::zwp_pointer_gesture_pinch_v1 *object);
        zwp_pointer_gesture_pinch_v1();

        virtual ~zwp_pointer_gesture_pinch_v1();

        void init(struct ::wl_registry *registry, uint32_t id, int version);
        void init(struct ::zwp_pointer_gesture_pinch_v1 *object);

        struct ::zwp_pointer_gesture_pinch_v1 *object() { return m_zwp_pointer_gesture_pinch_v1; }
        const struct ::zwp_pointer_gesture_pinch_v1 *object() const { return m_zwp_pointer_gesture_pinch_v1; }
        static zwp_pointer_gesture_pinch_v1 *fromObject(struct ::zwp_pointer_gesture_pinch_v1 *object);

        bool isInitialized() const;

        uint32_t version() const;
        static const struct ::wl_interface *interface();

        void destroy();

    protected:
        virtual void zwp_pointer_gesture_pinch_v1_begin(uint32_t serial, uint32_t time, struct ::wl_surface *surface, uint32_t fingers);
        virtual void zwp_pointer_gesture_pinch_v1_update(uint32_t time, wl_fixed_t dx, wl_fixed_t dy, wl_fixed_t scale, wl_fixed_t rotation);
        virtual void zwp_pointer_gesture_pinch_v1_end(uint32_t serial, uint32_t time, int32_t cancelled);

    private:
        void init_listener();
        static const struct zwp_pointer_gesture_pinch_v1_listener m_zwp_pointer_gesture_pinch_v1_listener;
        static void handle_begin(
            void *data,
            struct ::zwp_pointer_gesture_pinch_v1 *object,
            uint32_t serial,
            uint32_t time,
            struct ::wl_surface *surface,
            uint32_t fingers);
        static void handle_update(
            void *data,
            struct ::zwp_pointer_gesture_pinch_v1 *object,
            uint32_t time,
            wl_fixed_t dx,
            wl_fixed_t dy,
            wl_fixed_t scale,
            wl_fixed_t rotation);
        static void handle_end(
            void *data,
            struct ::zwp_pointer_gesture_pinch_v1 *object,
            uint32_t serial,
            uint32_t time,
            int32_t cancelled);
        struct ::zwp_pointer_gesture_pinch_v1 *m_zwp_pointer_gesture_pinch_v1;
    };
}

QT_WARNING_POP
QT_END_NAMESPACE

#endif
